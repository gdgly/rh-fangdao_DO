C51 COMPILER V9.00   BSP                                                                   11/18/2015 10:20:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE BSP
OBJECT MODULE PLACED IN .\Obj\bsp.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE bsp\bsp.c LARGE OMF2 WARNINGLEVEL(0) BROWSE ORDER INCDIR(.\app;.\Lib;.\bsp)
                    - DEBUG PRINT(.\Obj\bsp.lst) OBJECT(.\Obj\bsp.obj)

line level    source

   1          
   2          
   3          #include "bsp.h"
   4          #include "GPIO.h"
   5          #include "USART.h"
   6          #include "ADC.h"
   7          #include "PCA.h"
   8          #include "timer.h"
   9          
  10          
  11          void gpio_config(void)
  12          {
  13   1              GPIO_InitTypeDef gpio_init_structure;
  14   1              
  15   1              gpio_init_structure.Mode = GPIO_HighZ;
  16   1              gpio_init_structure.Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
  17   1              GPIO_Inilize(GPIO_P1,&gpio_init_structure);
  18   1      }
  19          
  20          void all_irq_disable(void)
  21          {
  22   1              EA = 0;
  23   1      }
  24          
  25          void all_irq_enable(void)
  26          {
  27   1              EA = 1;
  28   1      }
  29          
  30          void watchdog_config(void)
  31          {
  32   1              WDT_CONTR = 0X3F;
  33   1      }
  34          
  35          void watchdog_clear(void)
  36          {
  37   1              WDT_CONTR = 0X3F;
  38   1      }
  39          
  40          void uart1_config(void)
  41          {
  42   1              COMx_InitDefine uart_init_structure;
  43   1                      
  44   1              uart_init_structure.UART_Mode      = UART_8bit_BRTx;            //ƒ£ Ω,       UART_ShiftRight,UART_8bit_BRTx,UART_9
             -bit,UART_9bit_BRTx
  45   1              uart_init_structure.UART_BRT_Use   = BRT_Timer2;                        // π”√≤®Ãÿ¬ ,   BRT_Timer1, BRT_Timer2 (◊¢“‚: ¥Æø⁄2πÃ∂
             -® π”√BRT_Timer2)
  46   1              uart_init_structure.UART_BaudRate  = 9600;                              //≤®Ãÿ¬ , “ª∞„ 110 ~ 115200
  47   1              uart_init_structure.UART_RxEnable  = ENABLE;                            //Ω” ’‘ –Ì,   ENABLEªÚDISABLE
  48   1              uart_init_structure.BaudRateDouble = DISABLE;                   //≤®Ãÿ¬ º”±∂, ENABLEªÚDISABLE
  49   1              uart_init_structure.UART_Interrupt = ENABLE;                            //÷–∂œ‘ –Ì,   ENABLEªÚDISABLE
  50   1              uart_init_structure.UART_Polity    = PolityHigh;                        //÷–∂œ”≈œ»º∂, PolityLow,PolityHigh
  51   1              uart_init_structure.UART_P_SW      = UART1_SW_P30_P31;  //«–ªª∂Àø⁄,   UART1_SW_P30_P31,UART1_SW_P36_P37,UA
             -RT1_SW_P16_P17(±ÿ–Î π”√ƒ⁄≤ø ±÷”)
C51 COMPILER V9.00   BSP                                                                   11/18/2015 10:20:09 PAGE 2   

  52   1              uart_init_structure.UART_RXD_TXD_Short = DISABLE;               //ƒ⁄≤ø∂Ã¬∑RXD”ÎTXD, ◊ˆ÷–ºÃ, ENABLE,DISABLE
  53   1              USART_Configuration(USART1, &uart_init_structure);
  54   1      }
  55          
  56          
  57          void uart2_config(void)
  58          {
  59   1              COMx_InitDefine uart_init_structure;
  60   1                      
  61   1              uart_init_structure.UART_Mode      = UART_8bit_BRTx;            //ƒ£ Ω,       UART_ShiftRight,UART_8bit_BRTx,UART_9
             -bit,UART_9bit_BRTx
  62   1              uart_init_structure.UART_BRT_Use   = BRT_Timer2;                        // π”√≤®Ãÿ¬ ,   BRT_Timer1, BRT_Timer2 (◊¢“‚: ¥Æø⁄2πÃ∂
             -® π”√BRT_Timer2)
  63   1              uart_init_structure.UART_BaudRate  = 9600;                              //≤®Ãÿ¬ , “ª∞„ 110 ~ 115200
  64   1              uart_init_structure.UART_RxEnable  = ENABLE;                            //Ω” ’‘ –Ì,   ENABLEªÚDISABLE
  65   1              uart_init_structure.BaudRateDouble = DISABLE;                   //≤®Ãÿ¬ º”±∂, ENABLEªÚDISABLE
  66   1              uart_init_structure.UART_Interrupt = ENABLE;                            //÷–∂œ‘ –Ì,   ENABLEªÚDISABLE
  67   1              uart_init_structure.UART_Polity    = PolityLow;                 //÷–∂œ”≈œ»º∂, PolityLow,PolityHigh
  68   1              uart_init_structure.UART_P_SW      = UART2_SW_P10_P11;  //«–ªª∂Àø⁄,   UART1_SW_P30_P31,UART1_SW_P36_P37,UA
             -RT1_SW_P16_P17(±ÿ–Î π”√ƒ⁄≤ø ±÷”)
  69   1              uart_init_structure.UART_RXD_TXD_Short = DISABLE;               //ƒ⁄≤ø∂Ã¬∑RXD”ÎTXD, ◊ˆ÷–ºÃ, ENABLE,DISABLE
  70   1              USART_Configuration(USART2, &uart_init_structure);
  71   1      }
  72          
  73          
  74          
  75          
  76          
  77          
  78          
  79          void spi_init(void)
  80          {
  81   1              SPI_Disable();
  82   1      }
  83          
  84          
  85          
  86          void pwm2_config(void)
  87          {
  88   1              PCA_InitTypeDef pca_init_structure;
  89   1              
  90   1              ACC = P_SW1;
  91   1              ACC &= ~(CCP_S0 | CCP_S1);      //CCP_S0=1 CCP_S1=0
  92   1              ACC |= CCP_S0;                  //(P3.4/ECI_2, P3.5/CCP0_2, P3.6/CCP1_2, P3.7/CCP2_2)
  93   1              P_SW1 = ACC; 
  94   1              
  95   1              pca_init_structure.PCA_IoUse = PCA_P34_P35_P36_P37;
  96   1              pca_init_structure.PCA_Clock = PCA_Clock_1T;
  97   1              pca_init_structure.PCA_Polity = PolityLow;
  98   1              pca_init_structure.PCA_Mode     = PCA_Mode_PWM;         
  99   1              pca_init_structure.PCA_PWM_Wide = PCA_PWM_8bit;         
 100   1              pca_init_structure.PCA_Interrupt_Mode = DISABLE;                
 101   1              pca_init_structure.PCA_Value    = 128 << 8;                     
 102   1              PCA_Init(PCA0, &pca_init_structure);    
 103   1      }
 104          
 105          
 106          
 107          /*
 108          void timer0_config(void)
 109          {
 110                  TIM_InitTypeDef tim_init_structure;
C51 COMPILER V9.00   BSP                                                                   11/18/2015 10:20:09 PAGE 3   

 111                  
 112                  tim_init_structure.TIM_Mode = TIM_16BitAutoReload;
 113                  tim_init_structure.TIM_Polity = PolityLow;
 114                  tim_init_structure.TIM_Interrupt = TIM_CLOCK_1T;
 115                  tim_init_structure.TIM_ClkOut = ENABLE;
 116                  tim_init_structure.TIM_Value = 65536UL - (MAIN_Fosc / 100000UL);
 117                  tim_init_structure.TIM_Run = ENABLE;
 118                  Timer_Inilize(Timer0,&tim_init_structure);
 119          }
 120          */
 121          
 122          void timer0_config(void)                
 123          {
 124   1              AUXR |= 0x80;           //
 125   1              TMOD &= 0xF0;           //
 126   1              TL0 = 0x9A;             //
 127   1              TH0 = 0xA9;             
 128   1              TF0 = 0;                //
 129   1              TR0 = 1;                //
 130   1              ET0 = 1;
 131   1      }
 132          
 133          
 134          void adc_config(void)
 135          {
 136   1              ADC_InitTypeDef adc_init_structure;
 137   1              
 138   1              adc_init_structure.ADC_Px = ADC_P13 | ADC_P14 | ADC_P15 | ADC_P16 | ADC_P17;
 139   1              adc_init_structure.ADC_Speed = ADC_360T;
 140   1              adc_init_structure.ADC_Power = ENABLE;
 141   1              adc_init_structure.ADC_AdjResult = ADC_RES_H8L2;
 142   1              adc_init_structure.ADC_Polity = PolityLow;
 143   1              adc_init_structure.ADC_Interrupt = DISABLE;
 144   1              ADC_Inilize(&adc_init_structure);                                       //≥ı ºªØ
 145   1              ADC_PowerControl(ENABLE);
 146   1      }
 147          
 148          
 149          u8 get_port_val(u8 port)
 150          {
 151   1              u8 val = 0;
 152   1              
 153   1              switch (port)
 154   1              {
 155   2                      case CODE_1:
 156   2                              val = CODE_1();
 157   2                      break;
 158   2                      
 159   2                      case CODE_2:
 160   2                              val = CODE_2();
 161   2                      break;
 162   2                      
 163   2                      case CODE_3:
 164   2                              val = CODE_3();
 165   2                      break;
 166   2                      
 167   2                      case CODE_4:
 168   2                              val = CODE_4();
 169   2                      break;
 170   2                      
 171   2                      case LED_5_R:
 172   2                              val = LED_5_R();
C51 COMPILER V9.00   BSP                                                                   11/18/2015 10:20:09 PAGE 4   

 173   2                      break;
 174   2              }
 175   1              
 176   1              return val;
 177   1      }
 178          
 179          
 180          void set_port_val(u8 port, u8 val)
 181          {
 182   1              switch (port)
 183   1              {
 184   2                      case CH_CTRL0:
 185   2                              if (val == 1)
 186   2                              {
 187   3                                      CH_CTRL0_H();
 188   3                              }
 189   2                              else
 190   2                              {
 191   3                                      CH_CTRL0_L();
 192   3                              }
 193   2                      break;
 194   2                      
 195   2                      case CH_CTRL1:
 196   2                              if (val == 1)
 197   2                              {
 198   3                                      CH_CTRL1_H();
 199   3                              }
 200   2                              else
 201   2                              {
 202   3                                      CH_CTRL1_L();
 203   3                              }
 204   2                      break;
 205   2                      
 206   2                      case LED_1:
 207   2                              if (val == 1)
 208   2                              {
 209   3                                      LED_1_H();
 210   3                              }
 211   2                              else
 212   2                              {
 213   3                                      LED_1_L();
 214   3                              }
 215   2                      break;
 216   2                      
 217   2                      case LED_2:
 218   2                              if (val == 1)
 219   2                              {
 220   3                                      LED_2_H();
 221   3                              }
 222   2                              else
 223   2                              {
 224   3                                      LED_2_L();
 225   3                              }
 226   2                      break;
 227   2                      
 228   2                      case LED_3:
 229   2                              if (val == 1)
 230   2                              {
 231   3                                      LED_3_H();
 232   3                              }
 233   2                              else
 234   2                              {
C51 COMPILER V9.00   BSP                                                                   11/18/2015 10:20:09 PAGE 5   

 235   3                                      LED_3_L();
 236   3                              }
 237   2                      break;
 238   2                      
 239   2                      case LED_4:
 240   2                              if (val == 1)
 241   2                              {
 242   3                                      LED_4_H();
 243   3                              }
 244   2                              else
 245   2                              {
 246   3                                      LED_4_L();
 247   3                              }
 248   2                      break;
 249   2                      
 250   2                      case LED_5:
 251   2                              if (val == 1)
 252   2                              {
 253   3                                      LED_5_H();
 254   3                              }
 255   2                              else
 256   2                              {
 257   3                                      LED_5_L();
 258   3                              }
 259   2                      break;
 260   2                      
 261   2                      case RS485_DE:
 262   2                              if (val == 1)
 263   2                              {
 264   3                                      RS485_DE_H();
 265   3                              }
 266   2                              else
 267   2                              {
 268   3                                      RS485_DE_L();
 269   3                              }
 270   2                      break;
 271   2      
 272   2                      case ALARM_OUT1:
 273   2                              if (val == 1)
 274   2                              {
 275   3                                      ALARM_OUT1_H();
 276   3                              }
 277   2                              else
 278   2                              {
 279   3                                      ALARM_OUT1_L();
 280   3                              }
 281   2                      break;
 282   2                      
 283   2                      case ALARM_OUT2:
 284   2                              if (val == 1)
 285   2                              {
 286   3                                      ALARM_OUT2_H();
 287   3                              }
 288   2                              else
 289   2                              {
 290   3                                      ALARM_OUT2_L();
 291   3                              }
 292   2                      break;
 293   2                      
 294   2                      case ALARM_OUT3:
 295   2                              if (val == 1)
 296   2                              {
C51 COMPILER V9.00   BSP                                                                   11/18/2015 10:20:09 PAGE 6   

 297   3                                      ALARM_OUT3_H();
 298   3                              }
 299   2                              else
 300   2                              {
 301   3                                      ALARM_OUT3_L();
 302   3                              }
 303   2                      break;
 304   2                      
 305   2                      case ALARM_OUT4:
 306   2                              if (val == 1)
 307   2                              {
 308   3                                      ALARM_OUT4_H();
 309   3                              }
 310   2                              else
 311   2                              {
 312   3                                      ALARM_OUT4_L();
 313   3                              }
 314   2                      break;
 315   2              }
 316   1      }
 317          
 318          
 319          
 320          
 321          void bsp_init(void)
 322          {
 323   1              gpio_config();
 324   1              watchdog_config();
 325   1              uart1_config();
 326   1              uart2_config();
 327   1      //      pwm2_config();
 328   1              spi_init();
 329   1              adc_config();
 330   1              timer0_config();
 331   1      }
 332          
 333          
 334          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    478    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
