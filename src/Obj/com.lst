C51 COMPILER V9.00   COM                                                                   11/18/2015 10:20:07 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE COM
OBJECT MODULE PLACED IN .\Obj\com.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE app\com.c LARGE OMF2 WARNINGLEVEL(0) BROWSE ORDER INCDIR(.\app;.\Lib;.\bsp)
                    - DEBUG PRINT(.\Obj\com.lst) OBJECT(.\Obj\com.obj)

line level    source

   1          
   2          
   3          #include "com.h"
   4          
   5          
   6          
   7          void delay(u32 cnt)
   8          {
   9   1              while(cnt--);
  10   1      }
  11          
  12          
  13          void delay_1ms(u32 cnt)         //@22.1184MHz
  14          {
  15   1      
  16   1              unsigned char i, j;
  17   1              while (cnt)
  18   1              {
  19   2                      _nop_();
  20   2                      _nop_();
  21   2                      i = 22;
  22   2                      j = 128;
  23   2                      do
  24   2                      {
  25   3                              while (--j);
  26   3                      } while (--i);
  27   2                      cnt--;
  28   2              }
  29   1      }
  30          
  31          
  32          void queue_init(Queue *queue)
  33          {
  34   1              queue->front = 0;
  35   1              queue->rear = 0;
  36   1      }
  37          
  38          
  39          u8 queue_en(Queue *queue, u8 e)
  40          {
  41   1      
  42   1              if ((queue->rear+1)%QUEUE_SIZE == queue->front)
  43   1              {
  44   2                      return FALSE;
  45   2              }
  46   1              
  47   1              queue->d[queue->rear] = e;
  48   1              queue->rear = (queue->rear+1) % QUEUE_SIZE;
  49   1              
  50   1              return TRUE;
  51   1      }
  52          
  53          
  54          u8 queue_de(Queue *queue, u8 *e)
C51 COMPILER V9.00   COM                                                                   11/18/2015 10:20:07 PAGE 2   

  55          {
  56   1              
  57   1              if (queue->front == queue->rear)
  58   1              {
  59   2                      return FALSE;
  60   2              }
  61   1              
  62   1              
  63   1              *e = queue->d[queue->front];
  64   1              queue->front = (queue->front+1) % QUEUE_SIZE;
  65   1              
  66   1              return TRUE;
  67   1      }
  68          
  69          u8 queue_is_empty(Queue *queue)
  70          {
  71   1              if (queue->front == queue->rear)
  72   1              {
  73   2                      return TRUE;
  74   2              }
  75   1              else
  76   1              {
  77   2                      return FALSE;
  78   2              }
  79   1      }
  80          
  81          
  82          u8 queue_is_full(Queue *queue)
  83          {
  84   1              if ((queue->rear+1)%QUEUE_SIZE == queue->front)
  85   1              {
  86   2                      return TRUE;
  87   2              }
  88   1              else
  89   1              {
  90   2                      return FALSE;
  91   2              }
  92   1      }
  93          
  94          
  95          u8 queue_traverse(Queue *queue, u8 *pd)
  96          {
  97   1              u8 p = queue->front;
  98   1              
  99   1              if (queue->rear == queue->front)
 100   1              {
 101   2                      return FALSE;
 102   2              }
 103   1              
 104   1              while (p != queue->rear)
 105   1              {
 106   2                      *pd++ = queue->d[p];
 107   2                      p = (p+1) % QUEUE_SIZE;
 108   2              }
 109   1      
 110   1              return TRUE;
 111   1      }
 112          
 113          
 114          u8 check_sum(u8 *d, u8 len)
 115          {
 116   1              u16 sum = 0;
C51 COMPILER V9.00   COM                                                                   11/18/2015 10:20:07 PAGE 3   

 117   1              u8 i = 0;
 118   1              
 119   1              for (i=0; i<len; i++)
 120   1              {
 121   2                      sum += d[i];    
 122   2                      if (sum & 0xFF00)
 123   2                      {
 124   3                              sum = (sum & 0x00FF);
 125   3                      }
 126   2              }
 127   1              
 128   1              sum ^= 0x00FF;  
 129   1              
 130   1              return (u8)sum;
 131   1      }
 132          
 133          /*********************************************************** 
 134          Function        : toBin
 135          Description     : decimal base covertion binary
 136          Parameter       : num is decimal base. d[] is seve binary values
 137          Return          : void
 138          Date            : 2014.7.27
 139          Authot          : George        
 140          ************************************************************/
 141          void to_bin2(u8 num, u8 d[])
 142          {
 143   1              u8 i;
 144   1              
 145   1              for(i=0; i<8; i++)
 146   1              {
 147   2                      d[8-1-i] = num>>i&1;
 148   2              }
 149   1      }
 150          
 151          
 152          /*********************************************************** 
 153          Function        : toBin2
 154          Description     : decimal base covertion binary
 155          Parameter       : num is decimal base. d[] is seve binary values
 156          Return          : void
 157          Date            : 2014.7.27
 158          Authot          : George        
 159          ************************************************************/
 160          void to_bin(u8 num, u8 d[])
 161          {
 162   1              u8 i;
 163   1              
 164   1              for(i=0; i<8; i++)
 165   1              {
 166   2                      d[i] = num>>i&1;
 167   2              }
 168   1      }
 169          
 170          
 171          
 172          float ad_to_vol(u16 ad_val)
 173          {
 174   1              float vol = 0;
 175   1      
 176   1              vol = (float)ad_val * 5 / 1024;
 177   1      
 178   1              return vol;
C51 COMPILER V9.00   COM                                                                   11/18/2015 10:20:07 PAGE 4   

 179   1      }
 180          
 181          
 182          void soft_reset(void)
 183          {
 184   1              ((void(code*) (void))0x0000)();
 185   1      }
 186          
 187          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    762    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
